const rock="R";const paper="P";const scissors="S";const tnt="T";const waterballoon="W";const moves=[rock,paper,scissors,tnt,waterballoon];const roundOutcome={R:{R:0,P:-1,S:1,T:-1,W:1},P:{R:1,P:0,S:-1,T:-1,W:1},S:{R:-1,P:1,S:0,T:-1,W:1},T:{R:1,P:1,S:1,T:0,W:-1},W:{R:-1,P:-1,S:-1,T:1,W:0}};class rps{constructor(player1,player2){this.p1=player1;this.p2=player2;this.scores=[0,0];this.tnt=[100,100];this.rounds=[];this.reverseRounds=[];this.winner=null;this.error=null}checkMove(move,playerIndex){let ok=true;move=`${move}`;move=move.toUpperCase();if(!moves.includes(move)){ok=false;const error=`Unknown move ${move} from player ${playerIndex+1}`;if(!this.error){this.error=error;this.winner=2}else{if(playerIndex==1){this.error={p1:error,p2:this.error}}else{this.error={p1:this.error,p2:error}}this.winner=0}}if(move===tnt&&this.tnt[playerIndex]<1){ok=false;const failer=playerIndex==1?2:1;const error=`Player ${failer} ran out of tnt`;if(!this.error){this.error=error;this.winner=failer==1?2:1}else{if(playerIndex==1){this.error={p1:error,p2:this.error}}else{this.error={p1:this.error,p2:error}}this.winner=0}}if(move==tnt){this.tnt[playerIndex]--}return ok}playRound(i1,i2,roundWorth){let response1;let response2;let ok=true;try{setTimeout(()=>{if(response1===undefined){this.error="Player 1 took too long to respond";this.winner=2;ok=false}},1e3);response1=i1.makeMove({rounds:this.rounds});response1=response1.toUpperCase();ok=this.checkMove(response1,0)}catch(err){ok=false;this.error=err.message;this.winner=2}try{setTimeout(()=>{if(response1===undefined){this.error="Player 2 took too long to respond";this.winner=1;ok=false}},1e3);response2=i2.makeMove({rounds:this.reverseRounds});response2=response2.toUpperCase();ok=this.checkMove(response2,1)}catch(err){ok=false;if(!this.error){this.error=err.message;this.winner=1}else{this.error={p1:err.message,p2:err.message};this.winner=0}}if(!ok){return null}const undefinedMessage="Player didnt respond with a valid move";if(response1===undefined){if(response2===undefined){this.error={p1:undefinedMessage,p2:undefinedMessage};this.winner=0;return null}else{this.error=undefinedMessage;this.winner=2;return null}}else if(response2===undefined){this.error=undefinedMessage;this.winner=1;return null}this.rounds.push({p1:response1,p2:response2});this.reverseRounds.push({p2:response1,p1:response2});const outcome=roundOutcome[response1][response2];this.scores[0]+=outcome>0?roundWorth:0;this.scores[1]+=outcome<0?roundWorth:0;if(this.scores[0]>=1e3){this.winner=1}if(this.scores[1]>=1e3){this.winner=2}return outcome}playGame(){const i1=new this.p1;const i2=new this.p2;let i=0;let roundWorth=1;let roundWorths=[];const start=Date.now();while(this.winner==null&&this.error==null&&i<3e3){roundWorths.push(roundWorth);const output=this.playRound(i1,i2,roundWorth);if(output===null){const end=Date.now();return{roundWorths:roundWorths,tnt:this.tnt,rounds:this.rounds,scores:this.scores,winner:this.winner,error:this.error,msTaken:end-start}}if(output==0){roundWorth++}else{roundWorth=1}i++}const end=Date.now();return{roundWorths:roundWorths,tnt:{"Player 1":this.tnt[0],"Player 2":this.tnt[1]},rounds:this.rounds,scores:{"Player 1":this.scores[0],"Player 2":this.scores[1]},winner:this.winner==null?0:this.winner,error:this.error,msTaken:end-start}}}const handleError=result=>{const failer=result.winner==1?2:1;console.log(`Player ${failer} threw an error: \n\t${result.error}`);console.log(`Winner: ${result.winner}`)};const handleOutput=gameResults=>{if(gameResults.length==1){if(gameResults[0].error!=null){handleError(gameResults[0]);return}console.table({"TNT Left":gameResults[0].tnt,Scores:gameResults[0].scores},["Player 1","Player 2"]);console.log(`Winner: Player ${gameResults[0].winner}`);console.log(`Game took ${gameResults[0].msTaken}ms`);return}const times=[];const wins={"Player 1":{Wins:0},"Player 2":{Wins:0}};for(let i=0;i<gameResults.length;i++){const result=gameResults[i];if(result.error!=null){handleError(result)}times.push(result.msTaken);if(result.winner>0){wins[`Player ${result.winner}`].Wins++}}console.table(wins,["Wins"]);const average=Math.round(times.reduce((acc,val)=>acc+val)/gameResults.length)*100/100;console.log(`Average game took ${average}ms`)};const play=(p1Handle,p2Handle,n=1)=>{if(n==1){const game=new rps(p1Handle,p2Handle);const result=game.playGame();handleOutput([result]);return}const results=[];for(let i=0;i<n;i++){console.log(`Playing game ${i+1}/${n}`);const game=new rps(p1Handle,p2Handle);const result=game.playGame();results.push(result)}handleOutput(results)};const showHelp=()=>{console.log("args expected to play game muse follow :");console.log("");console.log("==============================================================================");console.log("{bot1 filename}: bot1 will play itself once");console.log("==============================================================================");console.log("{bot1 filename} {x games to play}: bot1 will play itself x times");console.log("==============================================================================");console.log("{bot1 filename} {bot2 filename}: bot1 will play bot2 once");console.log("==============================================================================");console.log("{bot1 filename} {bot2 filename} {x games to play}: bot1 will play bot2 x times");console.log("==============================================================================");console.log("-h or -help will display this message");console.log("==============================================================================")};const run=()=>{var args=process.argv.slice(2);if(args.includes("-h")||args.includes("-help")){showHelp();return}if(args.length==1){let player1handle=require(`./${args[0]}`);let player2handle=require(`./${args[0]}`);play(player1handle,player2handle)}else if(args.length==2){let player1handle=require(`./${args[0]}`);let player2handle;let times=Number(args[1]);if(Number.isNaN(times)){player2handle=require(`./${args[1]}`);play(player1handle,player2handle)}else{let player2handle=require(`./${args[0]}`);play(player1handle,player2handle,times)}}else if(args.length==3){let player1handle=require(`./${args[0]}`);let player2handle=require(`./${args[1]}`);let times=Number(args[2]);play(player1handle,player2handle,times)}else{showHelp()}};run();